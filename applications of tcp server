AIM: To implement date and time display from client to server using TCP Sockets 
DESCRIPTION: TCP Server gets the system date and time and opens the server socket to read the client details. Client send its address to the server. Then client receives the date and time from server to display. TCP socket server client connection is opened for communication. After the date time is displayed the server client connection is closed with its respective streams to be closed. 
ALGORITHM: 
Server 1. Create a server socket and bind it to port. 2. Listen for new connection and when a connection arrives, accept it. 3. Send server‟s date and time to the client. 4. Read client‟s IP address sent by the client. 5. Display the client details. 6. Repeat steps 2-5 until the server is terminated. 7. Close all streams. 8. Close the server socket. 9. Stop. 
Client 1. Create a client socket and connect it to the server‟s port number. 2. Retrieve its own IP address using built-in function. 3. Send its address to the server. 4. Display the date & time sent by the server. 5. Close the input and output streams. 6. Close the client socket. 7. Stop.
PROGRAM: //TCP Date Server--tcpdateserver.java
import java.net.*;
 import java.io.*; 
import java.util.*; 
class tcpdateserver
 { 
public static void main(String arg[]) 
{
ServerSocket ss = null; 
Socket cs; 
PrintStreamps; 
BufferedReader dis; 
String inet;
 try 
{
 ss = new ServerSocket(4444);

System.out.println("Press Ctrl+C to quit");
 while(true)
{ cs = ss.accept(); 
ps = new PrintStream(cs.getOutputStream());
 Date d = new Date(); 
ps.println(d); 
dis = new BufferedReader(new InputStreamReader(cs.getInputStream()));
inet = dis.readLine();
System.out.println("Client System/IP address is :"+ inet);
ps.close();
dis.close(); 
} } 
catch(IOException e) 
{ System.out.println("The exception is :" + e); 
} } } 
// TCP Date Client--tcpdateclient.java
import java.net.*; 
import java.io.*;
 class tcpdateclient
{ public static void main (String args[])
{ Socket soc;
BufferedReader dis; 
String sdate;
PrintStreamps;
 try { InetAddressia = InetAddress.getLocalHost(); 
if (args.length == 0) 
soc = new Socket(InetAddress.getLocalHost(),4444);
 else soc = new Socket(InetAddress.getByName(args[0]),4444);
 dis = new BufferedReader(new InputStreamReader(soc.getInputStream())); 
sdate=dis.readLine(); 
System.out.println("The date/time on server is : " +sdate);
ps = new PrintStream(soc.getOutputStream());
ps.println(ia); ps.close();
catch(IOException e) 
{ 
System.out.println("THE EXCEPTION is :" + e);
 } 
} 
}
Server: 
$ javac tcpdateserver.java
 $ java tcpdateserver Press Ctrl+C to quit 
Client System/IP address is :localhost.localdomain/127.0.0.1
 Client System/IP address is :localhost.localdomain/127.0.0.1 
Client:
$ javac tcpdateclient.java 
$ java tcpdateclient
The date/time on server is: Wed Jul 06 07:12:03 GMT 2011
 Every time when a client connects to the server, server‟s date/time will be returned to the client for synchronization.


 89 changes: 89 additions & 0 deletions89  
27.udp socket
@@ -0,0 +1,89 @@
AIM: To implement a DNS server and client in java using UDP sockets.
 DESCRIPTION DNS stands for domain name system. unique name of the host is identified with its IP address through server client communication. 
ALGORITHM: 
Server 
1. Create an array of hosts and its ip address in another array
 2. Create a datagram socket and bind it to a port 
3. Create a datagram packet to receive client request
 4. Read the domain name from client to be resolved
5. Lookup the host array for the domain name 
6. If found then retrieve corresponding address 
7. Create a datagram packet and send ip address to client
 8. Repeat steps 3-7 to resolve further requests from clients 
9. Close the server socket 
10. Stop 
Client 
1. Create a datagram socket 
2. Get domain name from user 
3. Create a datagram packet and send domain name to the server
 4. Create a datagram packet to receive server message
5. Read server's response
 6. If ip address then display it else display "Domain does not exist" 
7. Close the client socket 8. Stop

PROGRAM 
// UDP DNS Server -- udpdnsserver.java
import java.io.*;
 import java.net.*; 
public class udpdnsserver
{ private static int indexOf(String[] array, String str) 
{ str = str.trim(); for (int i=0; i<array.length; i++) 
{ if (array[i].equals(str)) return i; 
} 
return -1; 
} 
public static void main(String arg[])throws IOException
{ String[] hosts = {"yahoo.com", "gmail.com","cricinfo.com", "facebook.com"};
String[] ip = {"68.180.206.184", "209.85.148.19","80.168.92.140", "69.63.189.16"};
System.out.println("Press Ctrl + C to Quit"); 
while (true)
{ DatagramSocketserversocket=new DatagramSocket(1362);
byte[] senddata = new byte[1021]; 
byte[] receivedata = new byte[1021];
DatagramPacketrecvpack = new DatagramPacket(receivedata, receivedata.length); 
serversocket.receive(recvpack); String sen = new String(recvpack.getData());
InetAddressipaddress = recvpack.getAddress();
 int port = recvpack.getPort(); 
String capsent; System.out.println("Request for host " + sen);

if(indexOf (hosts, sen) != -1)
capsent = ip[indexOf (hosts, sen)];
 else capsent = "Host Not Found"; 
senddata = capsent.getBytes();
DatagramPacket pack = new DatagramPacket(senddata, senddata.length,ipaddress,port);
serversocket.send(pack); 
serversocket.close(); } } } 
//UDP DNS Client -- udpdnsclient.java 
import java.io.*;
 import java.net.*; 
public class udpdnsclient{ public static void main(String args[])throws IOException
{ BufferedReaderbr = new BufferedReader(new InputStreamReader(System.in));
DatagramSocketclientsocket = new DatagramSocket(); InetAddressipaddress;
 if (args.length == 0)
ipaddress = InetAddress.getLocalHost();
 else ipaddress = InetAddress.getByName(args[0]);
byte[] senddata = new byte[1024]; byte[] receivedata = new byte[1024];
 int portaddr = 1362; System.out.print("Enter the hostname : "); 
String sentence = br.readLine(); Senddata = sentence.getBytes(); DatagramPacket pack = new DatagramPacket(senddata,senddata.length, ipaddress,portaddr); 
clientsocket.send(pack); 
DatagramPacketrecvpack =new DatagramPacket(receivedata,receivedata.length); clientsocket.receive(recvpack); String modified = new String(recvpack.getData());
System.out.println("IP Address: " + modified); 
clientsocket.close(); }}
OUTPUT Server 
$ javac udpdnsserver.java 
$ java udpdnsserver Press Ctrl + C to Quit 
Request for host yahoo.com 
Request for host cricinfo.com
 Request for host youtube.com

Client 
$ javac udpdnsclient.java 
$ java udpdnsclient
Enter the hostname : yahoo.com
 IP Address: 68.180.206.184
 $ java udpdnsclient
Enter the hostname : cricinfo.com 
IP Address: 80.168.92.140
 $ java udpdnsclient
 Enter the hostname : youtube.com
 IP Address: Host Not Found
 39 changes: 39 additions & 0 deletions39  
28.dns server
@@ -0,0 +1,39 @@
AIM: To develop a client that contacts a given DNS server to resolve a given hostname.
DESCRIPTION: • Get the host name to be resolve using gethostname() • Check the host name using nslookup • Print the IP address, host name, Address length and Address type. • List the addresses stored in lookup 
ALGORITHM Step 1. Find the host name by using gethostbyname() Step 2. The host name is followed by the list of alias names Step 3. Pointer points to the array of pointers to the individual address Step 4. For each address call the inet_ntop() and print the returned string 
PROGRAM
#include<stdio.h>
 #include<netdb.h>
#include<arpa/inet.h>
#include<netinet/in.h>
int main(int argc,char**argv) 
{ charh_name; 
int h_type; 
struct hostent *host; 
struct in_addrh_addr; 
if(argc!=2)
{ fprintf(stderr,"USAGE:nslookup\n"); 
} 
if((host=gethostbyname(argv[1]))==NULL) 
{
fprintf(stderr,"(mini)nslookup failed on %s\n",argv[1]); }
h_addr.s_addr=*((unsigned long*)host->h_addr_list[0]);
printf("\n IP ADDRESS=%s\n",inet_ntoa(h_addr));
printf("\n HOST NAME=%s\n",host->h_name);
printf("\nADDRESS LENGTH =%d\n",host->h_length); 
printf("\nADDRESS TYPE=%d\n",host->h_addrtype); 
printf("\nLIST OF ADDRESS=%s\n",inet_ntoa(h_addr_list[0]));
 }

OUTPUT 
[it28@localhost ~]$ vi dns.c
 [it28@localhost ~]$
cc dns.c [it28@localhost ~]$
./a.out 90.0.0.36
 IP ADDRESS=90.0.0.36
 HOST NAME=90.0.0.36 
ADDRESS LENGTH =4 
ADDRESS TYPE=2
 LIST OF ADDRESS=90.0.0.36


 63 changes: 63 additions & 0 deletions63  
29.application of tcp
@@ -0,0 +1,63 @@
PROGRAM CODING: 
EchoClient.java import java.io.*; import java.net.*; public class echoc
{ 
public static void main(String[] args) 
{ 
try 
{ 
Socket s = new Socket("127.0.0.1",9999); BufferedReader r = new BufferedReader(new 
InputStreamReader(s.getInputStream())); 
PrintWriter w = new PrintWriter(s.getOutputStream(),true); BufferedReader con = new BufferedReader (new 
InputStreamReader(System.in)); 
String line; do 
{ 
line = r.readLine(); if(line != null) 
System.out.println(line); line = con.readLine(); w.println(line); 
} 
while(!line.trim().equals("bye")); 
}catch(Exception e) 
{ 
System.err.println(e); 
} 
} 
} 
Echoserver.java 
import java.io.*; import java.net.*; public class echos
{ 
public echos(int portNum) 
{ 
try 
{server = new ServerSocket(portNum);} catch(Exception e) 
{System.out.println(e);} 
} 
public void serve() 
{ try
{ 
while(true) 
{ 
Socket client = server.accept();
BufferedReader r = new BufferedReader(new InputStreamReader(client.getInputStream())); 
PrintWriter w = new PrintWriter(client.getOutputStream(),true); 
w.println("Welcome jeva Server Echo"); String line; 
do 
{ 
line = r.readLine(); if(line!=null) 
w.println("Got: "+line); 
} 
while(!line.trim().equals("bye")); client.close(); 
} 
}catch(Exception e) 
{ 
System.err.println(e); 
} 
} 
public static void main(String[] args) 
{ 
echos s = new echos(9999); s.serve(); 
} 
private ServerSocket server; 
} 
OUTPUT: 
Z:\CN>java echoc Welcome jeva Server Echo Hi!! 
Got: Hi!!

 48 changes: 48 additions & 0 deletions48  
30 (1).application of tcp server
@@ -0,0 +1,48 @@
PROGRAM CODING: 
ChatClient.java 
import java.io.*; import java.net.*; class chatClient { 
public static void main(String[] args)throws Exception 
{ 
Socket sock=new Socket("127.00.1",1309); 
BufferedReaderkeyRead=new BufferedReader(new InputStreamReader(System.in)); OutputStreamostream=sock.getOutputStream(); 
PrintWriterpwrite=new PrintWriter(ostream,true); InputStreamistream=sock.getInputStream(); 
BufferedReaderreceiveRead =new BufferedReader(new InputStreamReader(istream)); System.out.println("Start the chitchat,type and press Enter key"); 
String receiveMessage,sendMessage; while(true) 
{ 
sendMessage=keyRead.readLine(); pwrite.println(sendMessage); pwrite.flush(); 
if((receiveMessage=receiveRead.readLine())!=null) 
{ 
System.out.println(receiveMessage); 
} 
} 
} 
} 
ChatServer.java 
import java.io.*; import java.net.*; class chatServer { 
public static void main(String[] args)throws Exception 
{ 
ServerSocketsersock=new ServerSocket(1309); System.out.println("server ready for chatting"); Socket sock=sersock.accept(); 
BufferedReaderkeyRead=new BufferedReader(new InputStreamReader(System.in)); OutputStreamostream=sock.getOutputStream(); 
PrintWriterpwrite=new PrintWriter(ostream,true); InputStreamistream=sock.getInputStream(); 
BufferedReaderreceiveRead=new BufferedReader(new InputStreamReader(istream)); String receiveMessage,sendMessage; 
while(true) 
{ 
if((receiveMessage=receiveRead.readLine())!=null) 
{ 
System.out.println(receiveMessage); 
} 
sendMessage=keyRead.readLine(); pwrite.println(sendMessage);

pwrite.flush(); 
} 
} 
} 
OUTPUT: 
ChatClient
Z:\CN\Chat>java chatClient
Start the chitchat,type and press Enter key Hi!!! 
Hi! How are you ?
Chat Server Z:\CN\Chat>java chatServer server ready for chatting Hi!!! 
Hi! How are you ?


 Binary file addedBIN +481 KB 
exp-24.png

 Binary file addedBIN +503 KB 
exp-25.png
